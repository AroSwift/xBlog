- if !admin? then
  %h2
    %center.daccess
      You don't have access to this page.
- else 

  - content_for :current_page do
    Users
  %br

    - Request.all.order("created_at asc LIMIT 1").each do |request|
      - if request.status == true && super_admin? then
        %center
          The user
          %b
            = request.username

          -# rejected or accepted?
          - if !request.accepted_by.nil? then
            requested to be an administrator and was accepted by
            %b
              = request.accepted_by
          - elsif !request.rejected_by.nil? then
            requested to be an administrator and was rejected by
            %b
              = request.rejected_by

          = compare_time(request.updated_at) + '. '
          Do you want
          %b
            = request.username
          to be an administrator?
          %br
          %br
          = link_to 'Yes', admin_users_path(:username => request.username, :password => request.password, :id => request.id), :method => :update, class: "request"
          = link_to 'No', admin_users_path(:username => request.username, :password => request.password, :id => request.id, :adminreject => 'true'), :method => :delete, class: "request"
          %br
          %br
          %br

      - elsif request.status == false
        %center
          The user
          %b
            = request.username
          requested to be an administrator
          = compare_time(request.created_at)
          %br
          %br
          = link_to 'Yes', admin_users_path(:username => request.username, :password => request.password, :id => request.id), :method => :update, class: "request"
          = link_to 'No', admin_users_path(:username => request.username, :password => request.password, :id => request.id, :reject => 'true'), :method => :delete, class: "request"
          %br
          %br
          %br


  - User.all.order("id desc LIMIT 50").each do |user|
    %article.user
      %p.title
        Username:
        = user.username
        %br

        - if user.admin == false && user.superadmin == false || user.username == session[:current_username] || super_admin? 
          Password:
          =user.password
          - if admin? || super_admin? then
            = link_to 'Delete', delete_users_path(:dusername => user.username, :dpassword => user.password, :dadmin => user.admin), :method => :delete, :data => {:confirm => "Are you sure you want to delete '#{user.username}?' and all their posts and comments?"}, class: "dall"
            = link_to 'Edit', admin_edit_users_path(:id => user.id, :username => user.username, :password => user.password, :admin => user.admin), class: "pedit"

      - Post.where(author: user.username).each do |post|  
        .small= compare_time(post.updated_at)
        %h3
          %p.utitle= post.title    
        %p.ucontent= post.content
        %p.numcom
          This post has
          %b
            = Comment.where(post_id: post.id).count
          comments
        %br